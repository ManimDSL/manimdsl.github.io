Contributing
=====================================
We welcome all contributions! If you would like to contribute to VAlgoLang, please see the `corresponding guidelines <https://github.com/ManimDSL/ManimDSLCompiler/blob/master/CONTRIBUTING.md>`_ and our `code of conduct <https://github.com/ManimDSL/ManimDSLCompiler/blob/master/CONTRIBUTING.md>`_.

For a worked example on how to contribute to `our repository <https://github.com/ManimDSL/ManimDSLCompiler>`_, please read on!

Contribution case study: Adding Lists
---------------------------------------

To give you an example of how you can contribute to the repository, here's a worked example of how we added the List data structure to the language, just by extending the existing constructs. Our hope is that the core data structures we provide can be used as building blocks to create other more specialised data structures, reducing the amount of effort needed for a contributor to extend our language.

In summary, resizable Lists are simply an extension of Arrays, both within the compiler and also in the Python library (i.e., when translated into executable Manim code).

The way we implemented Lists are as follows:

1. Extended the `grammar <https://github.com/ManimDSL/ManimDSLCompiler/tree/master/antlr_config>`_ (both lexer and parser).
2. Created a type for Lists by extending the Array type, but with the methods ``prepend`` and ``append`` (as well as ``size``, like arrays).
3. Extended `Arrays <https://github.com/ManimDSL/ManimDSLCompiler/blob/master/src/main/resources/python/array.py>`_ in the Python library to be able to animate these new methods.
4. Extended the linear representation with `instructions <https://github.com/ManimDSL/ManimDSLCompiler/blob/master/src/main/kotlin/com/manimdsl/linearrepresentation/datastructures/list/ListLinearRepresentation.kt>`_ that generate the animations from Step 3.
5. Extended the virtual machine accordingly, using the instructions from Step 4.

And that's it! By relying on the existing constructs, we were able to add a new data structure to our language with minimal effort.

Full details are available in the corresponding `Pull Request <https://github.com/ManimDSL/ManimDSLCompiler/pull/130>`_ on GitHub.

Technical documentation
-------------------------

For those interested in contributing, a good source of information is our `technical documentation <https://manimdsl.github.io/ManimDSLCompiler/manimdsl/>`_ of the compiler, written using `KDoc <https://kotlinlang.org/docs/reference/kotlin-doc.html>`_ and generated by `Dokka <https://github.com/Kotlin/dokka>`_. This provides more detail on the classes and methods within each stage of the compiler. 

